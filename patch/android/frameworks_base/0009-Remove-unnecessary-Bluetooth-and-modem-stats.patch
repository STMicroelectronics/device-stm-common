From 6ce18d8d1d57dba50fa2919491b642d4943d4b13 Mon Sep 17 00:00:00 2001
From: Nicolas LOUBOUTIN <nicolas.louboutin@st.com>
Date: Wed, 21 Apr 2021 13:20:06 +0200
Subject: [PATCH] Remove unnecessary Bluetooth and modem stats

Change-Id: I36a89bfe9dab9a507f81b7c6aede9ca9be793983
---
 .../server/am/BatteryExternalStatsWorker.java | 55 -------------------
 1 file changed, 55 deletions(-)

diff --git a/services/core/java/com/android/server/am/BatteryExternalStatsWorker.java b/services/core/java/com/android/server/am/BatteryExternalStatsWorker.java
index 39f79ca2f13b..3766408764d3 100644
--- a/services/core/java/com/android/server/am/BatteryExternalStatsWorker.java
+++ b/services/core/java/com/android/server/am/BatteryExternalStatsWorker.java
@@ -16,8 +16,6 @@
 package com.android.server.am;
 
 import android.annotation.Nullable;
-import android.bluetooth.BluetoothActivityEnergyInfo;
-import android.bluetooth.BluetoothAdapter;
 import android.content.Context;
 import android.net.wifi.WifiManager;
 import android.os.BatteryStats;
@@ -29,8 +27,6 @@ import android.os.SynchronousResultReceiver;
 import android.os.SystemClock;
 import android.os.ThreadLocalWorkSource;
 import android.os.connectivity.WifiActivityEnergyInfo;
-import android.telephony.ModemActivityInfo;
-import android.telephony.TelephonyManager;
 import android.util.IntArray;
 import android.util.Slog;
 import android.util.TimeUtils;
@@ -118,9 +114,6 @@ class BatteryExternalStatsWorker implements BatteryStatsImpl.ExternalStatsSync {
     @GuardedBy("mWorkerLock")
     private WifiManager mWifiManager = null;
 
-    @GuardedBy("mWorkerLock")
-    private TelephonyManager mTelephony = null;
-
     // WiFi keeps an accumulated total of stats, unlike Bluetooth.
     // Keep the last WiFi stats so we can compute a delta.
     @GuardedBy("mWorkerLock")
@@ -404,8 +397,6 @@ class BatteryExternalStatsWorker implements BatteryStatsImpl.ExternalStatsSync {
             boolean onBattery, boolean onBatteryScreenOff, boolean useLatestStates) {
         // We will request data from external processes asynchronously, and wait on a timeout.
         SynchronousResultReceiver wifiReceiver = null;
-        SynchronousResultReceiver bluetoothReceiver = null;
-        SynchronousResultReceiver modemReceiver = null;
         boolean railUpdated = false;
 
         if ((updateFlags & BatteryStatsImpl.ExternalStatsSync.UPDATE_WIFI) != 0) {
@@ -444,35 +435,7 @@ class BatteryExternalStatsWorker implements BatteryStatsImpl.ExternalStatsSync {
             railUpdated = true;
         }
 
-        if ((updateFlags & BatteryStatsImpl.ExternalStatsSync.UPDATE_BT) != 0) {
-            // We were asked to fetch Bluetooth data.
-            final BluetoothAdapter adapter = BluetoothAdapter.getDefaultAdapter();
-            if (adapter != null) {
-                bluetoothReceiver = new SynchronousResultReceiver("bluetooth");
-                adapter.requestControllerActivityEnergyInfo(bluetoothReceiver);
-            }
-        }
-
-        if ((updateFlags & BatteryStatsImpl.ExternalStatsSync.UPDATE_RADIO) != 0) {
-            // We were asked to fetch Telephony data.
-            if (mTelephony == null) {
-                mTelephony = mContext.getSystemService(TelephonyManager.class);
-            }
-
-            if (mTelephony != null) {
-                modemReceiver = new SynchronousResultReceiver("telephony");
-                mTelephony.requestModemActivityInfo(modemReceiver);
-            }
-            if (!railUpdated) {
-                synchronized (mStats) {
-                    mStats.updateRailStatsLocked();
-                }
-            }
-        }
-
         final WifiActivityEnergyInfo wifiInfo = awaitControllerInfo(wifiReceiver);
-        final BluetoothActivityEnergyInfo bluetoothInfo = awaitControllerInfo(bluetoothReceiver);
-        final ModemActivityInfo modemInfo = awaitControllerInfo(modemReceiver);
 
         synchronized (mStats) {
             mStats.addHistoryEventLocked(
@@ -494,17 +457,6 @@ class BatteryExternalStatsWorker implements BatteryStatsImpl.ExternalStatsSync {
                 mStats.updateKernelMemoryBandwidthLocked();
             }
 
-            if ((updateFlags & UPDATE_RPM) != 0) {
-                mStats.updateRpmStatsLocked();
-            }
-
-            if (bluetoothInfo != null) {
-                if (bluetoothInfo.isValid()) {
-                    mStats.updateBluetoothStateLocked(bluetoothInfo);
-                } else {
-                    Slog.w(TAG, "bluetooth info is invalid: " + bluetoothInfo);
-                }
-            }
         }
 
         // WiFi and Modem state are updated without the mStats lock held, because they
@@ -518,13 +470,6 @@ class BatteryExternalStatsWorker implements BatteryStatsImpl.ExternalStatsSync {
             }
         }
 
-        if (modemInfo != null) {
-            if (modemInfo.isValid()) {
-                mStats.updateMobileRadioState(modemInfo);
-            } else {
-                Slog.w(TAG, "modem info is invalid: " + modemInfo);
-            }
-        }
     }
 
     /**
-- 
2.17.1

