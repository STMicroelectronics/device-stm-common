From 1e82cc16d4a1c2c88883b29710271a64a795670e Mon Sep 17 00:00:00 2001
From: frq09432 <nicolas.louboutin@st.com>
Date: Thu, 23 Jan 2020 16:19:56 +0100
Subject: [PATCH 1/5] Integration of Copro

Signed-off-by: Nicolas LOUBOUTIN <nicolas.louboutin@st.com>
Change-Id: Ibb15eb62f5a206b287627c84b8e74902d8a27b73
---
 api/current.txt                               |  32 ++++
 api/lint-baseline.txt                         | 178 ++++++++++++++++++
 core/java/android/copro/CoproManager.java     | 149 +++++++++++++++
 core/java/android/copro/CoproSerialPort.java  | 135 +++++++++++++
 core/java/android/copro/FirmwareInfo.aidl     |  19 ++
 core/java/android/copro/FirmwareInfo.java     | 103 ++++++++++
 core/java/android/copro/ICoproSerialPort.aidl |  43 +++++
 core/java/android/copro/ICoproService.aidl    |  46 +++++
 non-updatable-api/current.txt                 |  32 ++++
 9 files changed, 737 insertions(+)
 create mode 100644 core/java/android/copro/CoproManager.java
 create mode 100644 core/java/android/copro/CoproSerialPort.java
 create mode 100644 core/java/android/copro/FirmwareInfo.aidl
 create mode 100644 core/java/android/copro/FirmwareInfo.java
 create mode 100644 core/java/android/copro/ICoproSerialPort.aidl
 create mode 100644 core/java/android/copro/ICoproService.aidl

diff --git a/api/current.txt b/api/current.txt
index 952ccdad992..b71fb3a86c6 100644
--- a/api/current.txt
+++ b/api/current.txt
@@ -12883,6 +12883,38 @@ package android.content.res.loader {
 
 }
 
+package android.copro {
+
+  public class CoproManager {
+    method @Nullable public android.copro.FirmwareInfo getFirmwareByName(@NonNull String);
+    method @Nullable public android.copro.FirmwareInfo[] getFirmwareList();
+    method @Nullable public static android.copro.CoproManager getInstance();
+    method @Nullable public android.copro.CoproSerialPort getSerialPort();
+    method public boolean isFirmwareRunning(int);
+    method public void startFirmware(int);
+    method public void stopFirmware();
+  }
+
+  public class CoproSerialPort {
+    method public void close();
+    method public void open(int);
+    method @Nullable public String read();
+    method @Nullable public byte[] readB(int);
+    method public void write(@NonNull String);
+    method public int writeB(@NonNull byte[]);
+  }
+
+  public final class FirmwareInfo implements android.os.Parcelable {
+    method public int describeContents();
+    method public int getId();
+    method @NonNull public String getName();
+    method public boolean getState();
+    method public void writeToParcel(@NonNull android.os.Parcel, int);
+    field @NonNull public static final android.os.Parcelable.Creator<android.copro.FirmwareInfo> CREATOR;
+  }
+
+}
+
 package android.database {
 
   public abstract class AbstractCursor implements android.database.CrossProcessCursor {
diff --git a/api/lint-baseline.txt b/api/lint-baseline.txt
index 83c78fe9578..009150d85b6 100644
--- a/api/lint-baseline.txt
+++ b/api/lint-baseline.txt
@@ -15,6 +15,14 @@ ArrayReturn: android.app.Notification.MessagingStyle.Message#getMessagesFromBund
     
 ArrayReturn: android.content.ContentProviderOperation#resolveExtrasBackReferences(android.content.ContentProviderResult[], int) parameter #0:
     
+ArrayReturn: android.copro.CoproManager#getFirmwareList():
+    Method should return Collection<FirmwareInfo> (or subclass) instead of raw array; was `android.copro.FirmwareInfo[]`
+ArrayReturn: android.copro.ICoproService#getFirmwareList():
+    Method should return Collection<FirmwareInfo> (or subclass) instead of raw array; was `android.copro.FirmwareInfo[]`
+ArrayReturn: android.copro.ICoproService.Default#getFirmwareList():
+    Method should return Collection<FirmwareInfo> (or subclass) instead of raw array; was `android.copro.FirmwareInfo[]`
+ArrayReturn: android.database.sqlite.SQLiteDatabase#execPerConnectionSQL(String, Object[]) parameter #1:
+    Method parameter should be Collection<Object> (or subclass) instead of raw array; was `java.lang.Object[]`
 ArrayReturn: android.location.GnssAntennaInfo.SphericalCorrections#SphericalCorrections(double[][], double[][]) parameter #0:
     Method parameter should be Collection<> (or subclass) instead of raw array; was `double[][]`
 ArrayReturn: android.location.GnssAntennaInfo.SphericalCorrections#SphericalCorrections(double[][], double[][]) parameter #1:
@@ -523,6 +531,10 @@ KotlinOperator: android.media.AudioMetadata.ReadMap#get(android.media.AudioMetad
     Method can be invoked with an indexing operator from Kotlin: `get` (this is usually desirable; just make sure it makes sense for this type of object)
 
 
+ManagerLookup: android.copro.CoproManager#getInstance():
+    Managers must always be obtained from Context (`getInstance`)
+
+
 MethodNameUnits: android.media.MediaParser.SeekMap#getDurationMicros():
     Returned time values are strongly encouraged to be in milliseconds unless you need the extra precision, was `getDurationMicros`
 
@@ -543,6 +555,96 @@ MissingNullability: android.app.AsyncNotedAppOp#writeToParcel(android.os.Parcel,
     
 MissingNullability: android.app.SyncNotedAppOp#equals(Object) parameter #0:
     
+MissingNullability: android.copro.CoproManager#getFirmwareByName(String):
+    Missing nullability on method `getFirmwareByName` return
+MissingNullability: android.copro.CoproManager#getFirmwareByName(String) parameter #0:
+    Missing nullability on parameter `name` in method `getFirmwareByName`
+MissingNullability: android.copro.CoproManager#getFirmwareList():
+    Missing nullability on method `getFirmwareList` return
+MissingNullability: android.copro.CoproManager#getInstance():
+    Missing nullability on method `getInstance` return
+MissingNullability: android.copro.CoproManager#getSerialPort():
+    Missing nullability on method `getSerialPort` return
+MissingNullability: android.copro.CoproSerialPort#CoproSerialPort(android.copro.ICoproSerialPort) parameter #0:
+    Missing nullability on parameter `service` in method `CoproSerialPort`
+MissingNullability: android.copro.CoproSerialPort#read():
+    Missing nullability on method `read` return
+MissingNullability: android.copro.CoproSerialPort#readB(int):
+    Missing nullability on method `readB` return
+MissingNullability: android.copro.CoproSerialPort#write(String) parameter #0:
+    Missing nullability on parameter `command` in method `write`
+MissingNullability: android.copro.CoproSerialPort#writeB(byte[]) parameter #0:
+    Missing nullability on parameter `command` in method `writeB`
+MissingNullability: android.copro.FirmwareInfo#CREATOR:
+    Missing nullability on field `CREATOR` in class `class android.copro.FirmwareInfo`
+MissingNullability: android.copro.FirmwareInfo#getName():
+    Missing nullability on method `getName` return
+MissingNullability: android.copro.FirmwareInfo#writeToParcel(android.os.Parcel, int) parameter #0:
+    Missing nullability on parameter `out` in method `writeToParcel`
+MissingNullability: android.copro.ICoproSerialPort#read():
+    Missing nullability on method `read` return
+MissingNullability: android.copro.ICoproSerialPort#readB(int):
+    Missing nullability on method `readB` return
+MissingNullability: android.copro.ICoproSerialPort#write(String) parameter #0:
+    Missing nullability on parameter `command` in method `write`
+MissingNullability: android.copro.ICoproSerialPort#writeB(byte[]) parameter #0:
+    Missing nullability on parameter `command` in method `writeB`
+MissingNullability: android.copro.ICoproSerialPort.Default#asBinder():
+    Missing nullability on method `asBinder` return
+MissingNullability: android.copro.ICoproSerialPort.Default#read():
+    Missing nullability on method `read` return
+MissingNullability: android.copro.ICoproSerialPort.Default#readB(int):
+    Missing nullability on method `readB` return
+MissingNullability: android.copro.ICoproSerialPort.Default#write(String) parameter #0:
+    Missing nullability on parameter `command` in method `write`
+MissingNullability: android.copro.ICoproSerialPort.Default#writeB(byte[]) parameter #0:
+    Missing nullability on parameter `command` in method `writeB`
+MissingNullability: android.copro.ICoproSerialPort.Stub#asBinder():
+    Missing nullability on method `asBinder` return
+MissingNullability: android.copro.ICoproSerialPort.Stub#asInterface(android.os.IBinder):
+    Missing nullability on method `asInterface` return
+MissingNullability: android.copro.ICoproSerialPort.Stub#asInterface(android.os.IBinder) parameter #0:
+    Missing nullability on parameter `obj` in method `asInterface`
+MissingNullability: android.copro.ICoproSerialPort.Stub#getDefaultImpl():
+    Missing nullability on method `getDefaultImpl` return
+MissingNullability: android.copro.ICoproSerialPort.Stub#onTransact(int, android.os.Parcel, android.os.Parcel, int) parameter #1:
+    Missing nullability on parameter `data` in method `onTransact`
+MissingNullability: android.copro.ICoproSerialPort.Stub#onTransact(int, android.os.Parcel, android.os.Parcel, int) parameter #2:
+    Missing nullability on parameter `reply` in method `onTransact`
+MissingNullability: android.copro.ICoproSerialPort.Stub#setDefaultImpl(android.copro.ICoproSerialPort) parameter #0:
+    Missing nullability on parameter `impl` in method `setDefaultImpl`
+MissingNullability: android.copro.ICoproService#getFirmwareByName(String):
+    Missing nullability on method `getFirmwareByName` return
+MissingNullability: android.copro.ICoproService#getFirmwareByName(String) parameter #0:
+    Missing nullability on parameter `name` in method `getFirmwareByName`
+MissingNullability: android.copro.ICoproService#getFirmwareList():
+    Missing nullability on method `getFirmwareList` return
+MissingNullability: android.copro.ICoproService#getSerialPort():
+    Missing nullability on method `getSerialPort` return
+MissingNullability: android.copro.ICoproService.Default#asBinder():
+    Missing nullability on method `asBinder` return
+MissingNullability: android.copro.ICoproService.Default#getFirmwareByName(String):
+    Missing nullability on method `getFirmwareByName` return
+MissingNullability: android.copro.ICoproService.Default#getFirmwareByName(String) parameter #0:
+    Missing nullability on parameter `name` in method `getFirmwareByName`
+MissingNullability: android.copro.ICoproService.Default#getFirmwareList():
+    Missing nullability on method `getFirmwareList` return
+MissingNullability: android.copro.ICoproService.Default#getSerialPort():
+    Missing nullability on method `getSerialPort` return
+MissingNullability: android.copro.ICoproService.Stub#asBinder():
+    Missing nullability on method `asBinder` return
+MissingNullability: android.copro.ICoproService.Stub#asInterface(android.os.IBinder):
+    Missing nullability on method `asInterface` return
+MissingNullability: android.copro.ICoproService.Stub#asInterface(android.os.IBinder) parameter #0:
+    Missing nullability on parameter `obj` in method `asInterface`
+MissingNullability: android.copro.ICoproService.Stub#getDefaultImpl():
+    Missing nullability on method `getDefaultImpl` return
+MissingNullability: android.copro.ICoproService.Stub#onTransact(int, android.os.Parcel, android.os.Parcel, int) parameter #1:
+    Missing nullability on parameter `data` in method `onTransact`
+MissingNullability: android.copro.ICoproService.Stub#onTransact(int, android.os.Parcel, android.os.Parcel, int) parameter #2:
+    Missing nullability on parameter `reply` in method `onTransact`
+MissingNullability: android.copro.ICoproService.Stub#setDefaultImpl(android.copro.ICoproService) parameter #0:
+    Missing nullability on parameter `impl` in method `setDefaultImpl`
 MissingNullability: android.icu.lang.UCharacter.UnicodeBlock#CHORASMIAN:
     
 MissingNullability: android.icu.lang.UCharacter.UnicodeBlock#CJK_UNIFIED_IDEOGRAPHS_EXTENSION_G:
@@ -603,6 +705,12 @@ MissingNullability: java.time.chrono.JapaneseEra#REIWA:
     
 
 
+NotCloseable: android.copro.CoproSerialPort:
+    Classes that release resources (close()) should implement AutoClosable and CloseGuard: class android.copro.CoproSerialPort
+NotCloseable: android.copro.ICoproSerialPort:
+    Classes that release resources (close()) should implement AutoClosable and CloseGuard: class android.copro.ICoproSerialPort
+NotCloseable: android.copro.ICoproSerialPort.Default:
+    Classes that release resources (close()) should implement AutoClosable and CloseGuard: class android.copro.ICoproSerialPort.Default
 NotCloseable: android.media.MediaCodec.GraphicBlock:
     Classes that release resources (finalize()) should implement AutoClosable and CloseGuard: class android.media.MediaCodec.GraphicBlock
 NotCloseable: android.media.MediaCodec.LinearBlock:
@@ -629,6 +737,20 @@ OnNameExpected: android.service.controls.ControlsProviderService#performControlA
     Methods implemented by developers should follow the on<Something> style, was `performControlAction`
 
 
+ParcelNotFinal: android.copro.FirmwareInfo:
+    Parcelable classes must be final: android.copro.FirmwareInfo is not final
+
+
+ParcelableList: android.copro.CoproManager#getFirmwareList():
+    Methods should return `List<? extends Parcelable>` instead of `Parcelable[]` to support `ParceledListSlice` under the hood: method android.copro.CoproManager.getFirmwareList()
+
+
+RawAidl: android.copro.ICoproSerialPort.Stub:
+    Raw AIDL interfaces must not be exposed: Stub extends Binder
+RawAidl: android.copro.ICoproService.Stub:
+    Raw AIDL interfaces must not be exposed: Stub extends Binder
+
+
 RequiresPermission: android.accounts.AccountManager#getAccountsByTypeAndFeatures(String, String[], android.accounts.AccountManagerCallback<android.accounts.Account[]>, android.os.Handler):
     
 RequiresPermission: android.accounts.AccountManager#hasFeatures(android.accounts.Account, String[], android.accounts.AccountManagerCallback<java.lang.Boolean>, android.os.Handler):
@@ -1243,6 +1365,62 @@ RequiresPermission: android.webkit.WebSettings#setGeolocationEnabled(boolean):
     
 
 
+RethrowRemoteException: android.copro.CoproSerialPort#open(int):
+    Methods calling system APIs should rethrow `RemoteException` as `RuntimeException` (but do not list it in the throws clause)
+RethrowRemoteException: android.copro.ICoproSerialPort#close():
+    Methods calling system APIs should rethrow `RemoteException` as `RuntimeException` (but do not list it in the throws clause)
+RethrowRemoteException: android.copro.ICoproSerialPort#open(int):
+    Methods calling system APIs should rethrow `RemoteException` as `RuntimeException` (but do not list it in the throws clause)
+RethrowRemoteException: android.copro.ICoproSerialPort#read():
+    Methods calling system APIs should rethrow `RemoteException` as `RuntimeException` (but do not list it in the throws clause)
+RethrowRemoteException: android.copro.ICoproSerialPort#readB(int):
+    Methods calling system APIs should rethrow `RemoteException` as `RuntimeException` (but do not list it in the throws clause)
+RethrowRemoteException: android.copro.ICoproSerialPort#write(String):
+    Methods calling system APIs should rethrow `RemoteException` as `RuntimeException` (but do not list it in the throws clause)
+RethrowRemoteException: android.copro.ICoproSerialPort#writeB(byte[]):
+    Methods calling system APIs should rethrow `RemoteException` as `RuntimeException` (but do not list it in the throws clause)
+RethrowRemoteException: android.copro.ICoproSerialPort.Default#close():
+    Methods calling system APIs should rethrow `RemoteException` as `RuntimeException` (but do not list it in the throws clause)
+RethrowRemoteException: android.copro.ICoproSerialPort.Default#open(int):
+    Methods calling system APIs should rethrow `RemoteException` as `RuntimeException` (but do not list it in the throws clause)
+RethrowRemoteException: android.copro.ICoproSerialPort.Default#read():
+    Methods calling system APIs should rethrow `RemoteException` as `RuntimeException` (but do not list it in the throws clause)
+RethrowRemoteException: android.copro.ICoproSerialPort.Default#readB(int):
+    Methods calling system APIs should rethrow `RemoteException` as `RuntimeException` (but do not list it in the throws clause)
+RethrowRemoteException: android.copro.ICoproSerialPort.Default#write(String):
+    Methods calling system APIs should rethrow `RemoteException` as `RuntimeException` (but do not list it in the throws clause)
+RethrowRemoteException: android.copro.ICoproSerialPort.Default#writeB(byte[]):
+    Methods calling system APIs should rethrow `RemoteException` as `RuntimeException` (but do not list it in the throws clause)
+RethrowRemoteException: android.copro.ICoproSerialPort.Stub#onTransact(int, android.os.Parcel, android.os.Parcel, int):
+    Methods calling system APIs should rethrow `RemoteException` as `RuntimeException` (but do not list it in the throws clause)
+RethrowRemoteException: android.copro.ICoproService#getFirmwareByName(String):
+    Methods calling system APIs should rethrow `RemoteException` as `RuntimeException` (but do not list it in the throws clause)
+RethrowRemoteException: android.copro.ICoproService#getFirmwareList():
+    Methods calling system APIs should rethrow `RemoteException` as `RuntimeException` (but do not list it in the throws clause)
+RethrowRemoteException: android.copro.ICoproService#getSerialPort():
+    Methods calling system APIs should rethrow `RemoteException` as `RuntimeException` (but do not list it in the throws clause)
+RethrowRemoteException: android.copro.ICoproService#isFirmwareRunning(int):
+    Methods calling system APIs should rethrow `RemoteException` as `RuntimeException` (but do not list it in the throws clause)
+RethrowRemoteException: android.copro.ICoproService#startFirmware(int):
+    Methods calling system APIs should rethrow `RemoteException` as `RuntimeException` (but do not list it in the throws clause)
+RethrowRemoteException: android.copro.ICoproService#stopFirmware():
+    Methods calling system APIs should rethrow `RemoteException` as `RuntimeException` (but do not list it in the throws clause)
+RethrowRemoteException: android.copro.ICoproService.Default#getFirmwareByName(String):
+    Methods calling system APIs should rethrow `RemoteException` as `RuntimeException` (but do not list it in the throws clause)
+RethrowRemoteException: android.copro.ICoproService.Default#getFirmwareList():
+    Methods calling system APIs should rethrow `RemoteException` as `RuntimeException` (but do not list it in the throws clause)
+RethrowRemoteException: android.copro.ICoproService.Default#getSerialPort():
+    Methods calling system APIs should rethrow `RemoteException` as `RuntimeException` (but do not list it in the throws clause)
+RethrowRemoteException: android.copro.ICoproService.Default#isFirmwareRunning(int):
+    Methods calling system APIs should rethrow `RemoteException` as `RuntimeException` (but do not list it in the throws clause)
+RethrowRemoteException: android.copro.ICoproService.Default#startFirmware(int):
+    Methods calling system APIs should rethrow `RemoteException` as `RuntimeException` (but do not list it in the throws clause)
+RethrowRemoteException: android.copro.ICoproService.Default#stopFirmware():
+    Methods calling system APIs should rethrow `RemoteException` as `RuntimeException` (but do not list it in the throws clause)
+RethrowRemoteException: android.copro.ICoproService.Stub#onTransact(int, android.os.Parcel, android.os.Parcel, int):
+    Methods calling system APIs should rethrow `RemoteException` as `RuntimeException` (but do not list it in the throws clause)
+
+
 SamShouldBeLast: android.location.LocationManager#registerGnssMeasurementsCallback(java.util.concurrent.Executor, android.location.GnssMeasurementsEvent.Callback):
     
 SamShouldBeLast: android.location.LocationManager#registerGnssNavigationMessageCallback(java.util.concurrent.Executor, android.location.GnssNavigationMessage.Callback):
diff --git a/core/java/android/copro/CoproManager.java b/core/java/android/copro/CoproManager.java
new file mode 100644
index 00000000000..0cfeca933b5
--- /dev/null
+++ b/core/java/android/copro/CoproManager.java
@@ -0,0 +1,149 @@
+/*
+ * Copyright (C) 2008 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package android.copro;
+
+import android.copro.ICoproService;
+import android.copro.ICoproSerialPort;
+import android.copro.CoproSerialPort;
+
+import android.util.AndroidException;
+import android.util.Log;
+import android.util.Slog;
+import android.os.RemoteException;
+import android.os.ServiceManager;
+
+import android.annotation.SuppressLint;
+import android.annotation.NonNull;
+import android.annotation.Nullable;
+
+/**
+ * The Manager class;
+ * The public methods of this class will be part of the new system API
+ */
+@SuppressLint("ManagerLookup")
+public class CoproManager {
+    private final ICoproService mService;
+    private static CoproManager sInstance = null;
+
+    @SuppressLint("ManagerLookup")
+    public static @Nullable CoproManager getInstance() {
+        if(sInstance == null)
+        {
+            sInstance = new CoproManager();
+        }
+        return sInstance;
+    }
+    /**
+     * Initialize the remote service and execution context
+     * ContextImpl will build this manager object and provide the
+     * remote service stub as parameter
+     *
+     */
+    private CoproManager() {
+        mService = ICoproService.Stub.asInterface(ServiceManager.getService(ICoproService.class.getName()));             
+        if (mService == null) {
+            throw new IllegalStateException("Failed to find ICoproService by name [" + ICoproService.class.getName() + "]");
+        }
+    }
+
+    /**
+     * Get the firmware list
+     *
+     * @return firmware info list
+     */
+    @SuppressLint({"ParcelableList", "ArrayReturn"})
+    public @Nullable FirmwareInfo[] getFirmwareList() {
+        FirmwareInfo[] res = {};
+        try{
+            res = mService.getFirmwareList();
+        } catch (RemoteException ex){
+            Slog.e("CoproManager", "Unable to contact the remote Copro Service");
+        }
+        return res;
+    }
+
+    /**
+     * Get the firmware info by name
+     *
+     * @param name firmware binary name
+     * @return firmware info (associated to the firmware name)
+     */
+    public @Nullable FirmwareInfo getFirmwareByName(@NonNull String name) {
+        FirmwareInfo res = null;
+        try{
+            res = mService.getFirmwareByName(name);
+        } catch (RemoteException ex){
+            Slog.e("CoproManager", "Unable to contact the remote Copro Service");
+        }
+        return res;
+    }
+
+    /** Return if the firmware is running
+     *
+     * @param id firmware unique identifier
+     * @return true if the firmware is running, false otherwise
+     * */
+    public boolean isFirmwareRunning(int id) {
+        boolean res = false;
+        try{
+            res = mService.isFirmwareRunning(id);
+        } catch (RemoteException ex){
+            Slog.e("CoproService", "Unable to contact the remote Copro Service");
+        }
+        return res;
+    }
+
+    /**
+     * Start the firmware with the specific id
+     *
+     * @param id firmware unique identifier
+     */
+    public void startFirmware(int id) {
+        try{
+            mService.startFirmware(id);
+        } catch (RemoteException ex){
+            Slog.e("CoproManager", "Unable to contact the remote Copro Service");
+        }
+    }
+
+    /**
+     * Stop the firmware
+     */
+    public void stopFirmware() {
+        try{
+            mService.stopFirmware();
+        } catch (RemoteException ex){
+            Slog.e("CoproManager", "Unable to contact the remote Copro Service");
+        }
+    }
+
+    /**
+     * Open the serial port
+     *
+     * @return CoproSerialPort instance
+     */
+    public @Nullable CoproSerialPort getSerialPort() {
+        CoproSerialPort res = null;
+        try{
+            ICoproSerialPort serialPort = mService.getSerialPort();
+            res = new CoproSerialPort(serialPort);
+        } catch (RemoteException ex){
+            Slog.e("CoproManager", "Unable to contact the remote Copro Service");
+        }
+        return res;
+    }
+}
diff --git a/core/java/android/copro/CoproSerialPort.java b/core/java/android/copro/CoproSerialPort.java
new file mode 100644
index 00000000000..bb145c85591
--- /dev/null
+++ b/core/java/android/copro/CoproSerialPort.java
@@ -0,0 +1,135 @@
+/*
+ * Copyright (C) 2008 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package android.copro;
+
+import android.util.AndroidException;
+import android.util.Log;
+import android.util.Slog;
+import android.content.Context;
+import android.os.RemoteException;
+
+import android.annotation.SuppressLint;
+import android.annotation.NonNull;
+import android.annotation.Nullable;
+
+/**
+ * The Serial Port class;
+ * The public methods of this class will be part of the new system API
+ */
+@SuppressLint("NotCloseable")
+public class CoproSerialPort {
+    private final ICoproSerialPort mService;
+
+    /**
+     * {@hide} Initialize the remote service and execution context
+     * ContextImpl will build this manager object and provide the
+     * remote service stub as parameter
+     *
+     * @param service
+     */
+    public CoproSerialPort(@NonNull ICoproSerialPort service) {
+        mService = service;
+    }
+
+    /**
+     * Open the tty port with the specified mode
+     *
+     * @param mode
+     */
+    public void open(int mode) {
+        try{
+            if (! mService.open(mode)) {
+                Slog.e("CoproSerialPort", "Failed to open Copro serial port");
+                RemoteException ex = new RemoteException("Failed to open Copro serial port");
+                throw ex.rethrowAsRuntimeException();
+            }
+        } catch (RemoteException ex){
+            Slog.e("CoproSerialPort", "Failed to open Copro serial port");
+            throw ex.rethrowAsRuntimeException();
+        }
+    }
+
+    /**
+     * Close the tty port
+     */
+    public void close() {
+        try{
+            mService.close();
+        } catch (RemoteException ex){
+            Slog.e("CoproSerialPort", "Unable to contact the remote Copro Service (close)");
+        }
+    }
+
+    /**
+     * Read data from tty
+     *
+     * @return data (String format)
+     */
+    public @Nullable String read() {
+        String res = "";
+        try{
+            res = mService.read();
+        } catch (RemoteException ex){
+            Slog.e("CoproSerialPort", "Unable to contact the remote Copro Service (read)");
+        }
+        return res;
+    }
+
+    /**
+     * Read data from tty
+     *
+     * @param size
+     * @return data (raw format)
+     */
+    public @Nullable byte[] readB(int size) {
+        byte[] res = "-1".getBytes();
+        try{
+            res = mService.readB(size);
+        } catch (RemoteException ex){
+            Slog.e("CoproSerialPort", "Unable to contact the remote Copro Service (readB)");
+        }
+        return res;
+    }
+
+    /**
+     * Write string to tty
+     *
+     * @param command (String format)
+     */
+    public void write(@NonNull String command) {
+        try{
+            mService.write(command);
+        } catch (RemoteException ex){
+            Slog.e("CoproSerialPort", "Unable to contact the remote Copro Service (write)");
+        }
+    }
+
+    /**
+     * Write char sequence to tty
+     *
+     * @param command (raw format)
+     */
+    public int writeB(@NonNull byte[] command) {
+        int res = -1;
+        try{
+            res = mService.writeB(command);
+        } catch (RemoteException ex){
+            Slog.e("CoproSerialPort", "Unable to contact the remote Copro Service (writeB)");
+        }
+        return res;
+    }
+}
diff --git a/core/java/android/copro/FirmwareInfo.aidl b/core/java/android/copro/FirmwareInfo.aidl
new file mode 100644
index 00000000000..73d4bab8f50
--- /dev/null
+++ b/core/java/android/copro/FirmwareInfo.aidl
@@ -0,0 +1,19 @@
+/*
+ * Copyright (C) 2014 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package android.copro;
+
+parcelable FirmwareInfo;
diff --git a/core/java/android/copro/FirmwareInfo.java b/core/java/android/copro/FirmwareInfo.java
new file mode 100644
index 00000000000..db085768862
--- /dev/null
+++ b/core/java/android/copro/FirmwareInfo.java
@@ -0,0 +1,103 @@
+/*
+ * Copyright (C) 2014 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package android.copro;
+
+import android.os.Parcel;
+import android.os.Parcelable;
+
+import android.annotation.NonNull;
+
+public final class FirmwareInfo implements Parcelable {
+    private final int id;
+    private final String name;
+    private final boolean state;
+
+    /** @hide */
+    public FirmwareInfo() {
+        id = -1;
+        name = "";
+        state = false;
+    }
+    /** @hide */
+    public FirmwareInfo(int _id, String _name, boolean _state) {
+        id = _id;
+        name = _name;
+        state = _state;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if(obj instanceof FirmwareInfo) {
+            FirmwareInfo fwinfo = (FirmwareInfo)obj;
+            return id == fwinfo.id && name.equals(fwinfo.name) && state == fwinfo.state;
+        }
+        return false;
+    }
+
+    @Override
+    public int hashCode() {
+        return id ^ name.hashCode() ^ (state ? 1: 0);
+    }
+
+    @Override
+    public String toString() {
+        return "FirmwareInfo{id=" + id + ", name=" + name + ", state=" + state + "}";
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(@NonNull Parcel out, int flags) {
+        out.writeInt(id);
+        out.writeString(name);
+        out.writeBoolean(state);
+    }
+
+    public static final @NonNull Parcelable.Creator<FirmwareInfo> CREATOR
+            = new Parcelable.Creator<FirmwareInfo>() {
+        @Override
+        public FirmwareInfo createFromParcel(Parcel in) {
+            return new FirmwareInfo(in);
+        }
+
+        @Override
+        public FirmwareInfo[] newArray(int size) {
+            return new FirmwareInfo[size];
+        }
+    };
+
+    private FirmwareInfo(Parcel in) {
+        id = in.readInt();
+        name = in.readString();
+        state = in.readBoolean();
+    }
+
+    public int getId() {
+        return id;
+    }
+
+    public @NonNull String getName() {
+        return name;
+    }
+
+    public boolean getState() {
+        return state;
+    }
+}
diff --git a/core/java/android/copro/ICoproSerialPort.aidl b/core/java/android/copro/ICoproSerialPort.aidl
new file mode 100644
index 00000000000..75f4a281887
--- /dev/null
+++ b/core/java/android/copro/ICoproSerialPort.aidl
@@ -0,0 +1,43 @@
+/*
+ * Copyright (C) 2014 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package android.copro;
+
+/**
+ * Binder interface that clients running in application context
+ * can use to interface with remote service
+ *
+ * @hide
+ */
+interface ICoproSerialPort {
+    /* Open the tty port with the specific mode */
+    boolean open(int mode);
+
+    /* Close the tty port */
+    void close();
+
+    /* Read data from tty */
+    String read();
+
+    /* Read data from tty */
+    byte[] readB(int size);
+
+    /* Write data to tty */
+    void write(String command);
+
+    /* Write data to tty */
+    int writeB(in byte[] command);
+}
diff --git a/core/java/android/copro/ICoproService.aidl b/core/java/android/copro/ICoproService.aidl
new file mode 100644
index 00000000000..39b39169403
--- /dev/null
+++ b/core/java/android/copro/ICoproService.aidl
@@ -0,0 +1,46 @@
+/*
+ * Copyright (C) 2014 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package android.copro;
+
+import android.copro.FirmwareInfo;
+import android.copro.ICoproSerialPort;
+
+/**
+ * Binder interface that clients running in application context
+ * can use to interface with remote service
+ *
+ * @hide
+ */
+interface ICoproService {
+    /* Get the firmware list*/
+    FirmwareInfo[] getFirmwareList();
+
+    /* Get the firmware info by name */
+    FirmwareInfo getFirmwareByName(String name);
+
+    /* Return if the firmware is running */
+    boolean isFirmwareRunning(int id);
+
+    /* Start the firmware with the specific id */
+    void startFirmware(int id);
+
+    /* Stop the firmware */
+    void stopFirmware();
+
+    /* Open the serial port */
+    ICoproSerialPort getSerialPort();
+}
diff --git a/non-updatable-api/current.txt b/non-updatable-api/current.txt
index 5f15216e840..d506cf65d42 100644
--- a/non-updatable-api/current.txt
+++ b/non-updatable-api/current.txt
@@ -12883,6 +12883,38 @@ package android.content.res.loader {
 
 }
 
+package android.copro {
+
+  public class CoproManager {
+    method @Nullable public android.copro.FirmwareInfo getFirmwareByName(@NonNull String);
+    method @Nullable public android.copro.FirmwareInfo[] getFirmwareList();
+    method @Nullable public static android.copro.CoproManager getInstance();
+    method @Nullable public android.copro.CoproSerialPort getSerialPort();
+    method public boolean isFirmwareRunning(int);
+    method public void startFirmware(int);
+    method public void stopFirmware();
+  }
+
+  public class CoproSerialPort {
+    method public void close();
+    method public void open(int);
+    method @Nullable public String read();
+    method @Nullable public byte[] readB(int);
+    method public void write(@NonNull String);
+    method public int writeB(@NonNull byte[]);
+  }
+
+  public final class FirmwareInfo implements android.os.Parcelable {
+    method public int describeContents();
+    method public int getId();
+    method @NonNull public String getName();
+    method public boolean getState();
+    method public void writeToParcel(@NonNull android.os.Parcel, int);
+    field @NonNull public static final android.os.Parcelable.Creator<android.copro.FirmwareInfo> CREATOR;
+  }
+
+}
+
 package android.database {
 
   public abstract class AbstractCursor implements android.database.CrossProcessCursor {
-- 
2.17.1

