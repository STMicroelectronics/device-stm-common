From 3e0d043f97e1f8776be78538a86189700b7c85aa Mon Sep 17 00:00:00 2001
From: frq09432 <nicolas.louboutin@st.com>
Date: Mon, 11 Feb 2019 17:19:59 +0100
Subject: [PATCH 2/4] [debuggerd] kernel 4.19 header update

Change-Id: Ie5262594b27d07bd3236773b02d08e310b40e3b3
---
 debuggerd/libdebuggerd/utility.cpp | 35 +++++++++++++++++++++++++++++++----
 1 file changed, 31 insertions(+), 4 deletions(-)

diff --git a/debuggerd/libdebuggerd/utility.cpp b/debuggerd/libdebuggerd/utility.cpp
index d153865..f5f874d 100644
--- a/debuggerd/libdebuggerd/utility.cpp
+++ b/debuggerd/libdebuggerd/utility.cpp
@@ -306,8 +306,11 @@ const char* get_sigcode(int signo, int code) {
         case ILL_PRVREG: return "ILL_PRVREG";
         case ILL_COPROC: return "ILL_COPROC";
         case ILL_BADSTK: return "ILL_BADSTK";
+        case ILL_BADIADDR: return "ILL_BADIADDR";
+        case __ILL_BREAK: return "__ILL_BREAK";
+        case __ILL_BNDMOD: return "__ILL_BNDMOD";
       }
-      static_assert(NSIGILL == ILL_BADSTK, "missing ILL_* si_code");
+      static_assert(NSIGILL == __ILL_BNDMOD, "missing ILL_* si_code");
       break;
     case SIGBUS:
       switch (code) {
@@ -329,8 +332,15 @@ const char* get_sigcode(int signo, int code) {
         case FPE_FLTRES: return "FPE_FLTRES";
         case FPE_FLTINV: return "FPE_FLTINV";
         case FPE_FLTSUB: return "FPE_FLTSUB";
+        case __FPE_DECOVF: return "__FPE_DECOVF";
+        case __FPE_DECDIV: return "__FPE_DECDIV";
+        case __FPE_DECERR: return "__FPE_DECERR";
+        case __FPE_INVASC: return "__FPE_INVASC";
+        case __FPE_INVDEC: return "__FPE_INVDEC";
+        case FPE_FLTUNK: return "FPE_FLTUNK";
+        case FPE_CONDTRAP: return "FPE_CONDTRAP";
       }
-      static_assert(NSIGFPE == FPE_FLTSUB, "missing FPE_* si_code");
+      static_assert(NSIGFPE == FPE_CONDTRAP, "missing FPE_* si_code");
       break;
     case SIGSEGV:
       switch (code) {
@@ -342,8 +352,24 @@ const char* get_sigcode(int signo, int code) {
 #if defined(SEGV_PKUERR)
         case SEGV_PKUERR: return "SEGV_PKUERR";
 #endif
+#if defined(SEGV_ACCADI)
+        case SEGV_ACCADI: return "SEGV_ACCADI";
+#endif
+#if defined(SEGV_ADIDERR)
+        case SEGV_ADIDERR: return "SEGV_ADIDERR";
+#endif
+#if defined(SEGV_ADIPERR)
+        case SEGV_ADIPERR: return "SEGV_ADIPERR";
+#endif
       }
-#if defined(SEGV_PKUERR)
+
+#if defined(SEGV_ADIPERR)
+      static_assert(NSIGSEGV == SEGV_ADIPERR, "missing SEGV_* si_code");
+#elif defined(SEGV_ADIDERR)
+      static_assert(NSIGSEGV == SEGV_ADIDERR, "missing SEGV_* si_code");
+#elif defined(SEGV_ACCADI)
+      static_assert(NSIGSEGV == SEGV_ACCADI, "missing SEGV_* si_code");
+#elif defined(SEGV_PKUERR)
       static_assert(NSIGSEGV == SEGV_PKUERR, "missing SEGV_* si_code");
 #elif defined(SEGV_BNDERR)
       static_assert(NSIGSEGV == SEGV_BNDERR, "missing SEGV_* si_code");
@@ -365,6 +391,7 @@ const char* get_sigcode(int signo, int code) {
         case TRAP_TRACE: return "TRAP_TRACE";
         case TRAP_BRANCH: return "TRAP_BRANCH";
         case TRAP_HWBKPT: return "TRAP_HWBKPT";
+        case TRAP_UNK: return "TRAP_UNK";
       }
       if ((code & 0xff) == SIGTRAP) {
         switch ((code >> 8) & 0xff) {
@@ -386,7 +413,7 @@ const char* get_sigcode(int signo, int code) {
             return "PTRACE_EVENT_STOP";
         }
       }
-      static_assert(NSIGTRAP == TRAP_HWBKPT, "missing TRAP_* si_code");
+      static_assert(NSIGTRAP == TRAP_UNK, "missing TRAP_* si_code");
       break;
   }
   // Then the other codes...
-- 
2.7.4

